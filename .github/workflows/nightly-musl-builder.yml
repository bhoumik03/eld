name: Nightly builder for testing eld against musl-test-suite for x86 

on: 
  schedule:
      - cron: '0 2 * * *' # 2:00 AM
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    paths:
      - '.github/workflows/nightly-musl-builder.yml'

jobs:
  test-eld-external:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Clang 20
        uses: egor-tensin/setup-clang@v1
        with:
          version: "20"
          platform: x64

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y clang libc++-dev libc++abi-dev ccache libclang-rt-20-dev cmake ninja-build make

      - name: Checkout LLVM Project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project
          ref: main

      - name: Checkout ELD
        uses: actions/checkout@v4
        with:
          path: llvm-project/llvm/tools/eld
          ref: main 

      - name: Configure ELD Build
        run: |
          mkdir -p obj
          cd obj
          export CC=$(which clang)
          export CXX=$(which clang++)
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="llvm;clang;clang-tools-extra" \
            -DCMAKE_C_COMPILER=`clang` \
            -DCMAKE_CXX_COMPILER=`clang++` \
            -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
            -DLLVM_TARGETS_TO_BUILD="X86" \
            -DLLVM_CCACHE_BUILD=ON \
            -DLLVM_CCACHE_DIR=$PWD/ccache/ \
            -DELD_TARGETS_TO_BUILD='x86_64' \
            -DLLVM_ENABLE_SPHINX=OFF \
            ../llvm-project/llvm
            
          echo "CMake configuration completed"

      - name: Build ELD
        run: |
          cd obj
          
          ninja -j$(nproc) ld.eld
          
          echo "ELD build completed"
          echo "ELD binary location:"
          ls -la bin/ld.eld

      - name: Setup ELD Environment
        run: |          
          mkdir -p bin lib
          
          cp obj/bin/ld.eld bin/
          cp obj/lib/libLW.so.4 lib/

          # Set permissions
          chmod +x bin/ld.eld
          chmod +x lib/libLW.so.4
          
          # Set library path
          export LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH
          echo "LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          
          echo "ELD environment setup complete:"
          ls -lh bin/ld.eld
          ls -lh lib/libLW.so.4

      - name: Verify ELD Setup
        run: |
          
          echo "ELD dependencies:"
          ldd bin/ld.eld
          
          echo "ELD help output:"
          ./bin/ld.eld --help 2>&1 | head -3 || echo "ELD ready"

      - name: Test ELD Linking
        run: |
          
          cat > test.c << 'EOF'
          void _start() {
            long u = 99;
            asm (
              "movq $60, %%rax\n"
              "movq %0, %%rdi\n"
              "syscall\n"
              :
              : "r" (u)
              : "%rax", "%rdi"
            );
          }
          EOF
          
          echo "Test program created (exits with code 99)"

          # Compile and link with ELD
          clang -c test.c -o test.o
          ./bin/ld.eld -m elf_x86_64 -o test test.o
          
          # Test execution
          set +e
          ./test
          exit_code=$?
          set -e
          
          if [ $exit_code -eq 99 ]; then
            echo "ELD linking test passed"
          else
            echo "ELD linking test failed (expected 99, got $exit_code)"
            exit 1
          fi

      - name: Build musl
        run: |
          
          # Clone musl from GitHub
          git clone https://github.com/bminor/musl.git
          cd musl
          
          # Configure musl with clang 
          CC=clang CXX=clang++ ./configure --prefix=$PWD/../musl-install
          make -j$(nproc)
          make install

      - name: Fixing musl-clang wrapper for ELD compatibility
        run: |
          
          echo "Original ld.musl-clang wrapper:"
          cat musl-install/bin/ld.musl-clang
          
          # Replacing the exec line that uses $cc -print-prog-name=ld with ld.$LD
          sed -i 's/exec \$(\$cc -print-prog-name=ld)/exec ld.$LD/' musl-install/bin/ld.musl-clang
          
          echo "Fixed ld.musl-clang wrapper:"
          cat musl-install/bin/ld.musl-clang
          
          echo "Verifying the fix:"
          if grep -q "exec ld.\$LD" musl-install/bin/ld.musl-clang; then
            echo "Wrapper successfully fixed"
          else
            echo "Wrapper fix failed"
            exit 1
          fi

      - name: Setup Environment
        run: |
          echo "LD=eld" >> $GITHUB_ENV
          echo "PATH=$PWD/musl-install/bin:$PWD/bin:$PATH" >> $GITHUB_ENV
          echo "CC=$PWD/musl-install/bin/musl-clang" >> $GITHUB_ENV
          echo "CFLAGS=-Wno-unused-command-line-argument" >> $GITHUB_ENV
          echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV

      - name: Verify Environment
        run: |
          # These variables are now available from $GITHUB_ENV
          which musl-clang
          which ld.eld
          echo "Using CC: $CC" 

      - name: Test ELD + musl Integration
        run: |
          # Create test program
          cat > test.c << 'EOF'
          #include <stdio.h>
          int main() {
              printf("ELD + musl integration test\n");
              return 77;
          }
          EOF
          
          # Compile and link with ELD + musl
          clang -c test.c -o test.o
          LD=eld $CC $CFLAGS -o test test.o --static
          
          # Test execution
          set +e
          ./test
          exit_code=$?
          set -e
          
          if [ $exit_code -eq 77 ]; then
            echo "ELD + musl integration successful"
            
            # Verify static linking
            if ldd test 2>&1 | grep -q "not a dynamic executable"; then
              echo "Static linking confirmed"
            fi
          else
            echo "Integration test failed (expected 77, got $exit_code)"
            exit 1
          fi

      - name: Setup libc-test
        run: |
          git clone https://repo.or.cz/libc-test.git
          cd libc-test
          
          # Configure for ELD
          cp config.mak.def config.mak
          sed -i 's/LDFLAGS += -g/LDFLAGS += -g -Wl,--image-base=0x400000 -static/' config.mak
          
          echo "libc-test configured for ELD"

      - name: Build libc-test suite
        run: |          
          cd libc-test
          
          # Set environment for ELD
          export LD=eld
          export PATH="$PWD/../bin:$PATH"
          
          # Build test suite
          make -j$(nproc) 2>&1 | tee build.log

          if [ $successful_tests -gt 0 ]; then
            echo "libc-test build completed with $successful_tests test programs"
          else
            echo "No test programs built successfully"
            exit 1
          fi

      - name: Analyze Test Results
        run: |  
          .github/scripts/check-test-results.sh libc-test








      



